#include <stdio.h>
#include <algorithm>
using namespace std;

int n,m;
int map[503][503];

const char block[19][4][5]={
    {
        // 1x4 짜리 블록
        "1111",
        "0000",
        "0000",
        "0000"
    },
    {
        // 4x1 짜리 블록
        "1000",
        "1000",
        "1000",
        "1000"
    },
    {
        // 2x2 블록
        "1100",
        "1100",
        "0000",
        "0000"
    },
    {
        // ㄴ모양 블록 1
        "1000",
        "1000",
        "1100",
        "0000"
    },  
    {
        // ㄴ모양 블록 2 (90도 회전)
        "1110",
        "1000",
        "0000",
        "0000"
    },
    {
        // ㄴ모양 블록 3
        "1100",
        "0100",
        "0100",
        "0000"
    },
      {
        // ㄴ모양 블록 4
        "0010",
        "1110",
        "0000",
        "0000"
    },
    {
        // ㄴ모양 블록 5 (1에 대해 대칭)
        "0100",
        "0100",
        "1100",
        "0000",
    },
    {   // ㄴ모양 블록 6 (대칭 후 90도 회전)
        "1000",
        "1110",
        "0000",
        "0000",
    },
    {   // ㄴ모양 블록 7 (대칭 후 90도 회전)
        "1100",
        "1000",
        "1000",
        "0000",
    },
    {   // ㄴ모양 블록 8
        "1110",
        "0010",
        "0000",
        "0000",
    },
    {   // 번개모양 블록 1
        "1000",
        "1100",
        "0100",
        "0000",
    },
    {  // 번개모양 블록 2 (90도 회전)
        "0110",
        "1100",
        "0000",
        "0000",
    },
    {  // 번개모양 블록 3 (대칭)
        "0100",
        "1100",
        "1000",
        "0000",
    },
    {  // 번개모양 블록 4 (2를 대칭)
        "1100",
        "0110",
        "0000",
        "0000",
    },
    {   // ㅜ모양 1
        "1110",
        "0100",
        "0000",
        "0000",
    },
    {   // ㅜ모양 2 (90도 회전)
        "0100",
        "1100",
        "0100",
        "0000",
    },
    {   // ㅜ모양 3 (90도 회전)
        "0100",
        "1110",
        "0000",
        "0000",
    },
    {// ㅜ모양 4 (90도 회전)
        "1000",
        "1100",
        "1000",
        "0000",
    }
};


int get_sum(int sy, int sx, int i) {
    //i번째 블록일때 테트로미노의 합 구하기
    int sum = 0;
    for (int y = 0; y < 4; ++y) {
        for (int x = 0; x < 4; ++x) { 
            //문자로 저장한 block을 숫자로 변환
            sum += (block[i][y][x] - '0') * map[sy + y][sx + x];
        }
    }
    return sum;
}
 
int main()
{
    scanf("%d %d", &n, &m);
    for (int y = 0; y < n; y++) {
        for (int x = 0; x < m; x++) {
            scanf("%d", &map[y][x]);
        }
    }
    /*
        종이를 넘어가는 순간 절대로 최댓값이 될 수 없게 하기 위해서
        종이의 맨 밑 가로 세줄을 매우 작은 음수값으로 채움
    */
    for (int y = n; y < n + 3; y++) {
        for (int x = 0; x < m + 3; x++) {
            map[y][x] = -100000;
        }
    } 
 
    for (int y = 0; y < n + 3; y++) {
        for (int x = m; x < m + 3; x++) {
            map[y][x] = -100000;
        }
    } //종이의 맨 밑 세로 세줄 채우기 (겹치는 칸은 시간제한에 영향 거의 x)
 

    int answer = 0;
    // 모든 칸을 순회하며 각 칸에 19개의 블록모양을 대입해본다
    for (int y = 0; y < n; y++) {
        for (int x = 0; x < m; x++) {
            for (int i = 0; i < 19; i++) {
                int sum = get_sum(y, x, i);
                answer=max(sum,answer);
            }
        }
    }

    printf("%d", answer);
 
}